FAZENDO UM FORM BÁSICO

    Chamada do hook:

        const {handleSubmit, register} = useForm<Inputs>();

        Para utilizar os recursos do hook form. Iremos usar o gancho useForm().

        Também definimos um type Inputs para mesclar a biblioteca useForm com typescript. Assim ficará mais fácil quando abordarmos os assuntos de validação de formulário

    handleSubmit:

        Controla a ação do formulário caso ele seja validado corretamente ou não

    register:

        Registra os campos inputs para fazerem parte do react hook form

    Formulário:

    const {handleSubmit, register} = useForm<Inputs>();

    const handleFormSubmit: SubmitHandler<Inputs> = (data) => {
        console.log(data);
    }

    return (
        <form onSubmit={handleSubmit(handleFormSubmit)}>

            <input {...register('name')} />
            // Definimos nesse ponto que esse input se refere à propriedade name do tipo Inputs.
        
        </form>
    );

        // Perceba que definimos o tipo da função handleFormSubmit como SubmitHandler<Inputs>, e ela se encarrega de passar os parâmetros para a nossa função

APLICANDO VALIDAÇÃO
        
    Definir um campo obrigatório:

        No segundo parâmetro da função register passamos um objeto. Esse objeto tem várias propriedades, uma delas é o required.

    Propriedades básicas no objeto do register()

        min:
            Define o valor mínimo do campo
        
        max: 
            Define o valor máximo do campo

        required:
            Define o preenchimento obrigatório

        minLength:
            Define a quantidade mínima de caracteres

        maxLength:
            Define a quantidade máxima de caracteres

        pattern:
            Define a expressão regular daquele campo