INICIANDO UM PROJETO COM NEXT

    Next é um framework que tem várias funcionalidades integradas para usar com o reactJS

    Para criarmos o projeto com o Next devemos colocar o seguinte comando:

        npx create-next-app

    Antes de criarmos o projeto com Next é importante que se você quiser criar o projeto com a versão
    mais nova do Next, é necessário atualiza-lo com o seguinte comando:

        npm install -g create-next-app

    Dessa forma, ele atualiza o next para a sua versão mais nova, e instala ele globalmente

INICIANDO UM PROJETO COM VITE

    É possível iniciar o reactJS sem nenhum framework integrado, e fazemos isso com o VITE

    Instalando o Vite:

        npm create vite

    Após a instalação e escolhido as opç~es desejadas, faça o seguinte no terminal

        cd react_com_vite
        npm install
        npm run dev

EXPORTANDO E IMPORTANDO COMPONENTES

    EXPORTAÇÃO

    Existem dois tipos de exports

        Default

            export default Square;

            -- significa que o arquivo será representado apenas por um único componente, no exemplo será o Square
            -- Podemos chamar componentes dentro do componente Square, chamar funções o que seja
            -- mas o arquivo serpa representado por essa função, não é possível utilizar outro componente no momento da importação a não ser Square.
            -- Componentes auxiliares, que não são páginas, não exportamos de forma default

        Normal

            export function Square() {
                ... Código ...
            }
            -- Utilizado para componentes auxiliares

    Os tipos se diferem apenas no modo de importação que eu estou chamando eles.

    IMPORTAÇÃO

        Default

        import Square from "@/components/Square";

        -- O '@' é um atalho que dá referência ao caminho do src
        -- Ele é fornecido pelo NextJS
        -- Pode ser qualquer nome

        Normal

        import {Square, Circle} from "@/components/Square";

        Normal e default

        import  Square, { Circle } from '@/components/Geo';

REGRAS GERAIS DO JSX

    São três regras

    1ª:

        É necessário sempre retornar um elemento padrão (elemento root) de um componente;

        // Podemos colocar os elementos dentro de uma div ou usar um fragment
        // fragment: <>Olá Mundo!</>
    
    2ª:

        Sempre fechar todas as tags

    3ª:

        Para chamar qualquer propriedade do JSX devemos usar o camelCase


PASSANDO PROPS PARA UM COMPONENTE

    Apenas crie um type para funcionar como objeto, para a props, ele pode ter qualquer nome

    Isso também implica em dizer que todas as propriedades desse objeto deve ter necessariamente
    as mesmas propriedades que informamos no JSX ao chamar o componente...

    Siga o código...

CHILDREN DO COMPONENTE

    Abra a tag do componente coloque as tags JSX e feche novamente a tag JSX

        <Person>

            <div>

                <h1> Olá Mundo! </h1>

            </div>

        </Person>

    No componente:

        import {ReactNode} from 'react';

        type Props = {
            children: ReactNode;
        }

        export const Card = ({children}: Props) => {
            <div className="border-2 border-red-600 p-3 text-3xl text-center italic">
                {children}
            </div>
        }
    
    Como estamos recebendo um elemento JSX, o type deve ser ReactNode, se fosse uma string poderia ser o type string
    E assim por diante.

OPERADOR LÓGICO &&

    Usamos assim:

        {variavel && ...lógica...}

        // Se a variável não for undefined iremos executar a parte da lógica
        // Se for undefined não executaremos a lógica

    Só podemos retornar um único elemento depois do duplo 'e' comercial

RENDERIZANDO LISTAS

    {peopleList.length > 0 && 
        <ul>
        {peopleList.map(person => 
          <li key={person.id}>{person.name} - {person.profession}</li>
        )}
        </ul>
    }
    
-- ESTADOS E EVENTOS

ADICIONANDO EVENTO DE CLIQUE

    É possível utilizar o evento de Clique da seguinte forma:

    function handleClick() {
        alert('Funcionou!');
    }

    return (
      <div className="w-screen h-screen flex justify-center items-center">
        <button onClick={handleClick} className="p-3 bg-blue-700 text-white rounded-md">
          Clique aqui
        </button>
      </div>
    );

    Também poderíamos criar arros function, ou jogar essa função no próprio onClick

    De toda forma, se executarmos dessa maneira, seria lançado um erro na tela.

    Iremos estudar o assunto de Server Component ainda, no entanto, para que os nossos eventos
    funcionem, precisamos definir o nosso componente como cliente. Fazemos isso da seguinte maneira:

    escreva: "use client" na primeira linha do arquivo que se encontra o seu componente. E pronto!

    "use client"

    const Page = () => {

    function handleClick() {
        alert('Funcionou!');
    }

    return (
        <div className="w-screen h-screen flex justify-center items-center">
        <button onClick={handleClick} className="p-3 bg-blue-700 text-white rounded-md">
            Clique aqui
        </button>
        </div>
    );
    }

    export default Page;